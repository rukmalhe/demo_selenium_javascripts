// Generated by Selenium IDE - Refactored
const { Builder, By, Key, until } = require('selenium-webdriver');
const assert = require('assert');

async function fillAndSubmitLoginForm(driver, username, password) {
  const usernameField = await driver.wait(until.elementLocated(By.id("userName")), 5000);
  await driver.wait(until.elementIsVisible(usernameField), 5000);
  await usernameField.clear();
  await usernameField.sendKeys(username);

  const passwordField = await driver.wait(until.elementLocated(By.id("password")), 5000);
  await driver.wait(until.elementIsVisible(passwordField), 5000);
  await passwordField.clear();
  await passwordField.sendKeys(password);

  const loginBtn = await driver.wait(until.elementLocated(By.css(".btn-1")), 5000);
  await driver.wait(until.elementIsVisible(loginBtn), 5000);
  await loginBtn.click();
}

describe('AdminLoginTest', function () {
  this.timeout(30000);
  let driver;
  let vars;

  beforeEach(async function () {
    driver = await new Builder().forBrowser('firefox').build();
    vars = {
      USERNAME: "rukmal",
      PASSWORD: "password",
      WRONG_USERNAME: "rukmal1111",
      WRONG_PASSWORD: "password1111"
    };
  });

  afterEach(async function () {
    await driver.quit();
  });

  it('AdminLoginTest', async function () {
    await driver.get("http://localhost:8888/login");
    await driver.manage().window().setRect({ width: 1158, height: 692 });

    // Page title and heading check
    assert.strictEqual(await driver.getTitle(), "Manage Vacancies");
    assert.strictEqual(await driver.findElement(By.css("h2")).getText(), "Welcome, Please Login.!");

    // ✅ Valid login
    await fillAndSubmitLoginForm(driver, vars.USERNAME, vars.PASSWORD);

    // Post-login verification
    const homeLinkText = await driver.findElement(By.css("a.small-link")).getText();
    assert.strictEqual(homeLinkText, "« Back to the Home Page");

    // Logout
    const logoutBtn = await driver.wait(until.elementLocated(By.id('logout')), 5000);
    await driver.wait(until.elementIsVisible(logoutBtn), 5000);
    await driver.wait(until.elementIsEnabled(logoutBtn), 5000);
    await driver.executeScript("arguments[0].scrollIntoView({block: 'center'});", logoutBtn);
    await driver.sleep(500);
    await logoutBtn.click();

    // Post logout
    assert.strictEqual(await driver.getTitle(), "North West Recruitment Service");
    assert.strictEqual(await driver.findElement(By.css("h1")).getText(), "Welcome ! North West Recruitment");

    // 🔁 Return to login page
    await driver.findElement(By.linkText("Login")).click();

    // ❌ Invalid username
    await fillAndSubmitLoginForm(driver, vars.WRONG_USERNAME, vars.PASSWORD);
    assert.strictEqual(await driver.findElement(By.css("#login-error-message > p")).getText(), "Invalid username or password. Please try again!.");

    // ❌ Invalid password
    await fillAndSubmitLoginForm(driver, vars.USERNAME, vars.WRONG_PASSWORD);
    assert.strictEqual(await driver.findElement(By.css("#login-error-message > p")).getText(), "Invalid username or password. Please try again!.");
  });
});
